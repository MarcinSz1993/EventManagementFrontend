/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { downloadUserPersonalJsonFile } from '../fn/json-controller/download-user-personal-json-file';
import { DownloadUserPersonalJsonFile$Params } from '../fn/json-controller/download-user-personal-json-file';
import { uploadEvents } from '../fn/json-controller/upload-events';
import { UploadEvents$Params } from '../fn/json-controller/upload-events';

@Injectable({ providedIn: 'root' })
export class JsonControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `downloadUserPersonalJsonFile()` */
  static readonly DownloadUserPersonalJsonFilePath = '/api/json';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadUserPersonalJsonFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadUserPersonalJsonFile$Response(params?: DownloadUserPersonalJsonFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadUserPersonalJsonFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadUserPersonalJsonFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadUserPersonalJsonFile(params?: DownloadUserPersonalJsonFile$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadUserPersonalJsonFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `uploadEvents()` */
  static readonly UploadEventsPath = '/api/json';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadEvents()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadEvents$Response(params?: UploadEvents$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return uploadEvents(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadEvents$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadEvents(params?: UploadEvents$Params, context?: HttpContext): Observable<string> {
    return this.uploadEvents$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
