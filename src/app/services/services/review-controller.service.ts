/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteReview } from '../fn/review-controller/delete-review';
import { DeleteReview$Params } from '../fn/review-controller/delete-review';
import { getAllReviews } from '../fn/review-controller/get-all-reviews';
import { GetAllReviews$Params } from '../fn/review-controller/get-all-reviews';
import { getReceivedReviews } from '../fn/review-controller/get-received-reviews';
import { GetReceivedReviews$Params } from '../fn/review-controller/get-received-reviews';
import { getReviewsWrittenByUser } from '../fn/review-controller/get-reviews-written-by-user';
import { GetReviewsWrittenByUser$Params } from '../fn/review-controller/get-reviews-written-by-user';
import { PageResponseReviewDto } from '../models/page-response-review-dto';
import { ReviewDto } from '../models/review-dto';
import { writeReview } from '../fn/review-controller/write-review';
import { WriteReview$Params } from '../fn/review-controller/write-review';

@Injectable({ providedIn: 'root' })
export class ReviewControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `writeReview()` */
  static readonly WriteReviewPath = '/api/reviews';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `writeReview()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  writeReview$Response(params: WriteReview$Params, context?: HttpContext): Observable<StrictHttpResponse<ReviewDto>> {
    return writeReview(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `writeReview$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  writeReview(params: WriteReview$Params, context?: HttpContext): Observable<ReviewDto> {
    return this.writeReview$Response(params, context).pipe(
      map((r: StrictHttpResponse<ReviewDto>): ReviewDto => r.body)
    );
  }

  /** Path part for operation `getReviewsWrittenByUser()` */
  static readonly GetReviewsWrittenByUserPath = '/api/reviews/written';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReviewsWrittenByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReviewsWrittenByUser$Response(params?: GetReviewsWrittenByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReviewDto>> {
    return getReviewsWrittenByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReviewsWrittenByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReviewsWrittenByUser(params?: GetReviewsWrittenByUser$Params, context?: HttpContext): Observable<PageResponseReviewDto> {
    return this.getReviewsWrittenByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReviewDto>): PageResponseReviewDto => r.body)
    );
  }

  /** Path part for operation `getReceivedReviews()` */
  static readonly GetReceivedReviewsPath = '/api/reviews/received';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReceivedReviews()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReceivedReviews$Response(params?: GetReceivedReviews$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReviewDto>> {
    return getReceivedReviews(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReceivedReviews$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReceivedReviews(params?: GetReceivedReviews$Params, context?: HttpContext): Observable<PageResponseReviewDto> {
    return this.getReceivedReviews$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReviewDto>): PageResponseReviewDto => r.body)
    );
  }

  /** Path part for operation `getAllReviews()` */
  static readonly GetAllReviewsPath = '/api/reviews/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllReviews()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReviews$Response(params?: GetAllReviews$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseReviewDto>> {
    return getAllReviews(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllReviews$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllReviews(params?: GetAllReviews$Params, context?: HttpContext): Observable<PageResponseReviewDto> {
    return this.getAllReviews$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseReviewDto>): PageResponseReviewDto => r.body)
    );
  }

  /** Path part for operation `deleteReview()` */
  static readonly DeleteReviewPath = '/api/reviews/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteReview()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReview$Response(params: DeleteReview$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteReview(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteReview$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteReview(params: DeleteReview$Params, context?: HttpContext): Observable<string> {
    return this.deleteReview$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
