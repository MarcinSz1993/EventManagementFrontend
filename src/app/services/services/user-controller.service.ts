/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AuthenticationResponse } from '../models/authentication-response';
import { changePassword } from '../fn/user-controller/change-password';
import { ChangePassword$Params } from '../fn/user-controller/change-password';
import { createUser } from '../fn/user-controller/create-user';
import { CreateUser$Params } from '../fn/user-controller/create-user';
import { CreateUserResponse } from '../models/create-user-response';
import { getEmailFromToken } from '../fn/user-controller/get-email-from-token';
import { GetEmailFromToken$Params } from '../fn/user-controller/get-email-from-token';
import { getEventsListBasedOnUserPreferences } from '../fn/user-controller/get-events-list-based-on-user-preferences';
import { GetEventsListBasedOnUserPreferences$Params } from '../fn/user-controller/get-events-list-based-on-user-preferences';
import { login } from '../fn/user-controller/login';
import { Login$Params } from '../fn/user-controller/login';
import { PageResponseEventDto } from '../models/page-response-event-dto';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/api/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<CreateUserResponse>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params: CreateUser$Params, context?: HttpContext): Observable<CreateUserResponse> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<CreateUserResponse>): CreateUserResponse => r.body)
    );
  }

  /** Path part for operation `login()` */
  static readonly LoginPath = '/api/users/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `login()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login$Response(params: Login$Params, context?: HttpContext): Observable<StrictHttpResponse<AuthenticationResponse>> {
    return login(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `login$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  login(params: Login$Params, context?: HttpContext): Observable<AuthenticationResponse> {
    return this.login$Response(params, context).pipe(
      map((r: StrictHttpResponse<AuthenticationResponse>): AuthenticationResponse => r.body)
    );
  }

  /** Path part for operation `changePassword()` */
  static readonly ChangePasswordPath = '/api/users/changePassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePassword()` instead.
   *
   * This method doesn't expect any request body.
   */
  changePassword$Response(params: ChangePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return changePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePassword$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  changePassword(params: ChangePassword$Params, context?: HttpContext): Observable<string> {
    return this.changePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getEventsListBasedOnUserPreferences()` */
  static readonly GetEventsListBasedOnUserPreferencesPath = '/api/users/preferences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEventsListBasedOnUserPreferences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventsListBasedOnUserPreferences$Response(params: GetEventsListBasedOnUserPreferences$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseEventDto>> {
    return getEventsListBasedOnUserPreferences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEventsListBasedOnUserPreferences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEventsListBasedOnUserPreferences(params: GetEventsListBasedOnUserPreferences$Params, context?: HttpContext): Observable<PageResponseEventDto> {
    return this.getEventsListBasedOnUserPreferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseEventDto>): PageResponseEventDto => r.body)
    );
  }

  /** Path part for operation `getEmailFromToken()` */
  static readonly GetEmailFromTokenPath = '/api/users/email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmailFromToken()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmailFromToken$Response(params: GetEmailFromToken$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getEmailFromToken(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmailFromToken$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmailFromToken(params: GetEmailFromToken$Params, context?: HttpContext): Observable<string> {
    return this.getEmailFromToken$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
